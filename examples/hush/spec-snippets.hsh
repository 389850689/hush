let my_dict = @[ # dict
  field0: nil,
  field1: true,
  field2: 42, # integer
  field3: -12, # integer
  field4: 3.14, # float
  field5: 12E99, # float
  field6: [ # array
    "a simple string",
    "a string with \n escaped \" characters",
    'c', # a char
    '\n' # another char
  ],
  field7: function (arg1, arg2)
    return arg1 + arg2
  end
]

let x # Introduces the variable in the local scope
let y = 5 # Syntax sugar for assignment

x = 1

let expression = true

if expression then
  # body
end

if expression then
  # body
else
  # body
end

while expression do
  # body
end

for identifier in expression do
  # body
end

let iter = expression
let iteration = iter()
while not iteration.finished do
  let identifier = iteration.value
  # body
  iteration = iter()
end

# Simple function definition.
function sum(a, b, c)
  return a + b + c
end

function sum_curried(a)
  return function(b) # Closure!
    return a + b  # Here, `a` is captured from the outer scope.
  end
end

# Simple recursive function.
function factorial(n)
  if n < 2 then
    return 1
  else
    return n * factorial(n - 1)
  end
end

# A member function.
let my_obj = @[
  value: 5,

  method: function()
    if self != nil then
      return self.value
    else
      return 0
    end
  end,
]

my_obj.method() # Returns 5

let fun = my_obj.method

fun() # Returns 0

{
  docker create
         --name $container
         -i -a STDIN -a STDOUT -a STDERR # attach all stdio
         -v $pwd:/my/project:ro # mount the source code as a read-only volume
         my-image:latest;

  rsync -av --delete --delete-excluded
         # version control directories:
         --exclude='.git/'
         --exclude='.svn/'
         # build directories:
         --exclude='.stack-work/'
         --exclude='.ccls-cache/'
         --exclude='target/'
         --exclude='bin/'
         --exclude='obj/'
         # don't backup series or torrents:
         --exclude='series/'
         --exclude='torrents/'
         ~/ /mnt/backup 2>1
    | tee rsync.log;

  list-musics
    | xargs --null -- mediainfo --Output='Audio;%Duration%\n' # get duration in milliseconds
    | awk NF # remove empty lines
    | paste -s -d + # join lines with +
    | bc # eval the resulting expression
}

let results = {
  # (A)
  cat /etc/shadow ?; # Should error with permission denied, but won't abort the command block.

  # (B) The following pipeline will contain an error, but the command block won't be aborted.
  echo Hello world!
    | cat
    | cat /etc/shadow # Should error with permission denied.
    | cat ?;

  # (C)
  echo Hello world!; # Should succeed, resulting in 0.

  # (D) Should error, aborting the command block.
  echo Hello world!
    | cat /etc/shadow # Should error with permission denied.
    | cat;

  # (E)
  echo Foo Bar; # Won't be executed, because an error has caused the abortion of the command block.
}

let result

# (A): Permission denied.
result = results[0]
std.type(result) == "error"
result.status == 1 # Cat returns 1 when permission denied.

# (B): Array containing results of each command in the pipeline.
result = results[1]
std.type(result) == "array"
result[0] == 0 # Success.
result[1] == 0 # Success.
std.type(result[2]) == "error" # Permission denied.
result[3] == 0 # Success.

# (C): Success.
result = result[2]
result == 0

# (D): array containing results of each command in the pipeline.
result = result[3]
std.type(result) == "array"
result[0] == 0 # Success.
std.type(result[1]) == "error" # Permission denied.
result[2] == 0 # Success.

# (E): Due to the previous failure not guarded by the ? operator, the last command in the
# block didn't get to execute.
std.length(results) == 4

let file = "/etc/myconfig"

{
  echo $file; # /etc/myconfig

  echo '$file'; # $file
  echo '/usr'$file'uration'; # /usr/etc/myconfiguration

  echo "$file"; # /etc/myconfig
  echo "${file}"; # /etc/myconfig
  echo "/usr${file}uration"; # /usr/etc/myconfiguration
}

{ command > "2" }

let var = 2
{ command > $var } # Redirects to a file named "2"

{ ps aux | cat | cat | cat | grep 'cat' }

{ cat /dev/zero | tr '\0' '0' }

{ cat /dev/zero | tr '\0' '0' | head -c 20 }

${date --iso-8061}.stdout

let date = ${date --iso-8601}.stdout
{ tee $date }

# Array variable to capture the pids of all spawned tasks
let jobs = []

let job = &{ one long running command }
jobs.push(job)

job = &{ another long running command }
jobs.push(job)

job = &{ yet another long running command }
jobs.push(job)

# Give jobs some time to complete
std.sleep(2000)

let status = 0

for job in std.iter(jobs) do
  if job.running() then
    # Job is still running, abort...
    job.abort()
    status = 1
  else
    # Job finished, check if succeeded:
    let job_result = job.join()
    if std.type(job_result) == "error" then
      std.print("Failed to execute job:")
      std.print(job_result)
    end
  end
end

result = std.cd("/non-existing/directory")

if std.type(result) == "error" then
   std.print("Failed to change directory:")
   std.print(result)
end

let val = "this is a string"
std.type(val) == "string" # true

{ alias ll ls --color=auto -lh --time-style long-iso --group-directories-first }

{ cd /home/my-username/ }

function MyCounter(initial_value) # MyCounter is a function that represents a Class.
  let increment = function()
    self._value = self._value + 1
  end

  let get = function()
    return self._value
  end

  return @[
    _value: initial_value, # Public field.
    # These methods could be implemented here as well.
    # Remember, functions are nothing but values.
    increment: increment, # Method
    get: get,             # Method
  ]
end


let counter = MyCounter(0)
counter.increment()
counter.increment()
counter.get() # Returns 2


function StepCounter(initial_value, step)
  # This function captures the `step` variable, which acts as a private field.
  let increment = function()
    self._value = self._value + step
  end

  let print = function()
    std.print(self.get())
  end

  let counter = MyCounter(initial_value) # Inheritance
  counter.print = print # Additional method
  counter.increment = increment # Method overriding
  return counter
end


counter = StepCounter(0, 2)
counter.increment()
counter.increment()
counter.print() # Prints 4
